{"body":"## just try it out\r\n```\r\n$ go get github.com/jackdoe/godzilla\r\n$ git clone https://github.com/jackdoe/godzilla.git\r\n$ cd godzilla/example/blog && go run main.go\r\n```\r\n\r\nopen http://localhost:8080 and enjoy :) (/admin/ is for the admin panel)\r\n\r\n***\r\ncheck out the exampe directory for some apps - there is as simple blog, simple modular app with blog and url shortener, and one small sample app (does nothing usefull)\r\n\r\ni think that using the modular approach is very nice,here is a sample directory structure:\r\n```\r\napp/\r\napp/main.go - import (\"./blog\" \"./shortener\" \"./gallery\")\r\napp/blog/blog.go - has functions List() and Show()\r\napp/shortener/shortener.go - has functions Redirect() and Append()\r\napp/gallery/gallery.go - has functions Albums(), Album(), and Picture()\r\napp/v/ (views)\r\napp/v/blog/show.html\r\napp/v/blog/list.html\r\napp/v/gallery/albums.html\r\napp/v/gallery/album.html\r\napp/v/gallery/picture.html\r\n```\r\n\r\nnow lets create some routes:\r\n```\r\nfunc main() {\r\n    db, _ := sql.Open(\"sqlite3\", \"./lite.db\")\r\n    defer db.Close()\r\n    godzilla.EnableSessions = false\r\n    godzilla.Route(\"^/$\",blog.List)\r\n    godzilla.Route(\"^/show/(\\\\d+)$\",blog.Show)\r\n    godzilla.Route(\"^/gallery/albums$\",gallery.Albums)\r\n    godzilla.Route(\"^/gallery/album/(\\\\d+)$\",gallery.Album)\r\n    godzilla.Route(\"^/gallery/picture/(\\\\d+)$\",gallery.Picture)\r\n    godzilla.Route(\"^/url/(\\\\d+)\",shortener.Redirect)\r\n    godzilla.Route(\"^/url/append/(.*)\",shortener.Append)\r\n    godzilla.Start(\"localhost:8080\",db)\r\n}\r\n\r\n```\r\nif we access _/url/append/http://google.com_ godzilla's router will match _\"^/url/append/(.*)\"_\r\nand call url.Append(ctx) with one argument of type *Context, this is how it could look like:\r\n```\r\nfunc Append(ctx *godzilla.Context) {\r\n    id,_ := ctx.Replace(\"url\",map[string]interface{}{\"url\":ctx.Splat[1]})\r\n    ctx.Write(fmt.Sprintf(\"/url/%d\",id))\r\n}\r\n```\r\nso after accessing _/url/append/http://google.com_ you will see \"/url/%d\" (for example /url/44)\r\nand if you access _/url/44_ the router will call url.Rediret() with *Context\r\n```\r\nfunc Redirect(ctx *godzilla.Context) {\r\n    u := ctx.FindById(\"url\",ctx.Splat[1])\r\n    if u == nil {\r\n        ctx.Error(\"not found\",404)\r\n    } else {\r\n        ctx.Redirect(reflect.ValueOf(u[\"url\"]).String())\r\n    }\r\n}\r\n```\r\n\r\n## Context\r\nthe whole concept is very simple, every function is given context as an argument\r\nin this context you have link to the SQL database, basic database functions, http request and writer, and more\r\n```\r\ntype Context struct {\r\n    W http.ResponseWriter\r\n    R *http.Request\r\n    S *session.SessionObject\r\n    DB *sql.DB\r\n    O map[string]interface{}\r\n    Layout string\r\n    Splat []string\r\n    Params map[string]interface{}\r\n    Sparams map[string]string\r\n}\r\n```\r\nlets go over the fields one by one and imagine we are accessing the object in a function called **Show(ctx *godzilla.Context)** in module **blog**\r\n\r\n* ctx.W - is of type http.ResponseWriter we can use it to write all kids of stuff to it(headers, body, etc..) [http://golang.org/pkg/net/http/#ResponseWriter](http://golang.org/pkg/net/http/#ResponseWriter)\r\n* ctx.R - is the http.Request [http://golang.org/pkg/net/http/#Request](http://golang.org/pkg/net/http/#Request)\r\n* ctx.S - the SessionObject - ctx.S.Get('is_user_logged_in') [http://github.com/jackdoe/session](http://github.com/jackdoe/session)\r\n* ctx.DB - database/sql [http://golang.org/pkg/database/sql/](http://golang.org/pkg/database/sql/) [sql driver list](http://code.google.com/p/go-wiki/source/browse/SQLDrivers.wiki?repo=wiki)\r\n* ctx.O - output map, used as templates argument when called ctx.Render()\r\n* ctx.Layout - layout template (can be empty)\r\n* ctx.Splat - this is where regexp matched results from the route comes - `/url/(\\\\d+)` - `/url/1` will put in Splat `[]{\"/url/1\",\"1\"}` so `ctx.Splat[1]` is `(\\\\d+)` \r\n* ctx.Params - simple mapped parameters POST+GET /?a=4 will have `map[string]interface{}{\"a\":\"4\"}`\r\n* ctx.Sparams - same as Params but the value is of type string instead interface{} so /?a=4 will have `map[string]string{\"a\":\"4\"}`\r\n\r\n## ctx.Render()\r\n    \r\n\r\n\r\n### godoc\r\n\r\n```\r\nPACKAGE\r\n\r\npackage godzilla\r\n    import \"github.com/jackdoe/godzilla\"\r\n\r\n    micro web framework. it is not very generic, but it makes writing small\r\n    apps very fast\r\n\r\nCONSTANTS\r\n\r\nconst (\r\n    DebugQuery             = 1\r\n    DebugQueryResult       = 2\r\n    DebugTemplateRendering = 4\r\n    TypeJSON               = \"application/json\"\r\n    TypeHTML               = \"text/html\"\r\n    TypeText               = \"text/plain\"\r\n)\r\n\r\n\r\nVARIABLES\r\n\r\nvar (\r\n    Debug                 int    = 0\r\n    Views                 string = \"./v/\"\r\n    NoLayoutForXHR        bool   = true\r\n    TemplateExt           string = \".html\"\r\n    EnableSessions        bool   = true\r\n    EnableStaticDirectory bool   = true\r\n    StaticDirectory       string = \"./public\"\r\n)\r\n\r\n\r\nFUNCTIONS\r\n\r\nfunc Route(pattern string, handler func(*Context))\r\n    example: godzilla.Route(\"/product/show/(\\\\d+)\",product_show)\r\n\r\nfunc Start(addr string, db *sql.DB)\r\n    starts the http server example:\r\n\r\n    db, _ := sql.Open(\"sqlite3\", \"./foo.db\")\r\n    defer db.Close()\r\n    session.Init(db,\"session\")\r\n    session.CookieKey = \"go.is.awesome\"\r\n    session.CookieDomain = \"localhost\"\r\n    godzilla.Route(\"/product/show/(\\\\d+)\",product_show)\r\n    godzilla.Start(\"localhost:8080\",db)\r\n\r\nfunc Template_js(args ...string) string\r\n    var calendar_cell; $.get('/calendar/cell.jst',function(data) {\r\n    calendar_cell = data }); var calendar_row;\r\n    $.get('/calendar/row.jst',function(data) { calendar_row = data });\r\n\r\n\r\nTYPES\r\n\r\ntype Context struct {\r\n    W       http.ResponseWriter\r\n    R       *http.Request\r\n    S       *session.SessionObject\r\n    DB      *sql.DB\r\n    O       map[string]interface{}\r\n    Layout  string\r\n    Splat   []string\r\n    Params  map[string]interface{}\r\n    Sparams map[string]string\r\n}\r\n\r\nfunc (this *Context) ContentType(s string)\r\n\r\nfunc (this *Context) DeleteBy(table string, field string, v interface{})\r\n\r\nfunc (this *Context) DeleteId(table string, id interface{})\r\n\r\nfunc (this *Context) Error(message string, code int)\r\n    example:\r\n\r\n    ctx.Error(\"something very very bad just happened\",500)\r\n    // or\r\n    ctx.Error(\"something very very bad just happened\",http.StatusInternalServerError)\r\n\r\nfunc (this *Context) FindBy(table string, field string, v interface{}) map[string]interface{}\r\n\r\nfunc (this *Context) FindById(table string, id interface{}) map[string]interface{}\r\n\r\nfunc (this *Context) IsXHR() bool\r\n    returns true/false if the request is XHR example:\r\n\r\n    if ctx.IsXHR() {\r\n        ctx.Layout = \"special-ajax-lajout\"\r\n        // or\r\n        ctx.Render(\"ajax\")\r\n    }\r\n\r\nfunc (this *Context) Log(format string, v ...interface{})\r\n\r\nfunc (this *Context) Query(query string, args ...interface{}) []map[string]interface{}\r\n    WARNING: POC, bad performance, do not use in production.\r\n\r\n    Returns slice of map[query_result_fields]query_result_values, so for\r\n    example table with fields id,data,stamp will return [{id: xx,data: xx,\r\n    stamp: xx},{id: xx,data: xx,stamp: xx}] example:\r\n\r\n    ctx.O[\"SessionList\"] = ctx.Query(\"SELECT * FROM session\")\r\n\r\n    and then in the template:\r\n\r\n    {{range .SessionList}}\r\n        id: {{.id}}<br>\r\n        data: {{.data}}<br>\r\n        stamp: {{.stamp}}\r\n    {{end}}\r\n\r\nfunc (this *Context) Redirect(url string)\r\n    example:\r\n\r\n    ctx.Redirect(\"http://golang.org\")\r\n\r\nfunc (this *Context) Render(extra ...string)\r\n    renders a template, if the template name starts with os.PathSeparator it\r\n    is rendered with absolute path otherwise it is appended to Views\r\n    WARNING: all template names are converted to lower case\r\n\r\n    ctx.Render(\"show\") // -> ./v/show.html (Views + \"show\" + \".html\")\r\n    ctx.Render(\"/tmp/show\") // -> /tmp/show.html (\"/tmp/show\" + \".html\")\r\n\r\n    if left without arguments (ctx.Render()) - it takes the\r\n    package_name.function_name and renders\r\n\r\n    v/package_name/function.templateExt\r\n\r\n    so for example if we have package gallery with function Album() and we\r\n    have ctx.Render() inside it it will render Views + /gallery/ + album +\r\n    TemplateExt (default: ./v/gallery/album.html)\r\n\r\nfunc (this *Context) RenderJSON(j interface{}, error_code int) error\r\n\r\nfunc (this *Context) Replace(table string, input map[string]interface{}) (int64, error)\r\n    POC: bad performance updates database fields based on map's keys - every\r\n    key that begins with _ is skipped\r\n\r\nfunc (this *Context) Sanitize(s string) string\r\n\r\nfunc (this *Context) Write(s string)\r\n    shorthand for writing strings into the http writer example:\r\n\r\n    ctx.Write(\"luke, i am your father\")\r\n\r\n\r\nSUBDIRECTORIES\r\n\r\n    example\r\n```\r\n\r\n\r\n### looks of the blog example:\r\n\r\n![post list](http://img690.imageshack.us/img690/576/screenshot20120828at926.png)\r\n![single post](http://img502.imageshack.us/img502/2151/screenshot20120828at927.png)\r\n![admin-panel](http://img845.imageshack.us/img845/2151/screenshot20120828at927.png)\r\n","name":"Godzilla","google":"","note":"Don't delete this file! It's used internally to help with page regeneration.","tagline":"go micro-mini-nano web framework"}